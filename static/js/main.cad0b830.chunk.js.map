{"version":3,"sources":["logo.svg","CategoryPick.js","Question.js","Game.js","App.js","index.js"],"names":["module","exports","CategoryPick","props","useState","label","value","selectedCategory","setSelectedCategory","selectedDifficulty","setSelectedDifficulty","error","categoryList","handleClick","categoryOptions","Array","from","index","name","id","console","log","difficultyOptions","map","difficulty","toLowerCase","className","message","onChange","e","options","placeholder","onClick","Question","useParams","htmlEntities","Html5Entities","answerOptions","setAnswerOptions","selectedAnswer","setSelectedAnswer","isLoading","setIsLoading","questionObj","questionList","questionText","decode","question","history","useHistory","nextQuestion","push","Number","useEffect","incorrect_answers","correct_answer","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","hearts","health","heart","style","display","answerOptionsButtons","option","i","type","key","checked","htmlFor","preventDefault","score","setScore","prevScore","setHealth","slice","setTimeout","playAgain","Game","setCategoryList","setQuestionList","setError","undefined","window","location","reload","getCategories","axios","get","then","res","data","trivia_categories","catch","err","getQuestions","results","document","body","cursor","exact","path","children","App","setDefaultBreakpoints","xs","s","m","l","xl","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.cad0b830.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState} from 'react'\nimport {Link} from 'react-router-dom'\nimport \"react-select/dist/react-select.css\"\nimport \"react-virtualized-select/styles.css\"\nimport Select from 'react-virtualized-select'\n\nexport default function CategoryPick(props){\n   const [selectedCategory, setSelectedCategory] = useState({label: \"Select Category\", value: \"\"})\n   const [selectedDifficulty, setSelectedDifficulty] = useState({label: \"Select Difficulty\", value: \"medium\"})\n   const {error, categoryList, handleClick} = props\n   const difficultyList = [\"Easy\", \"Medium\", \"Hard\"]\n   const categoryOptions = Array.from(categoryList, (categoryList, index) => ({\n      label: categoryList.name,\n      value: categoryList.id\n   }))\n   console.log(categoryOptions);\n   const difficultyOptions = difficultyList.map((difficulty) => ({\n      label: difficulty,\n      value: difficulty.toLowerCase()\n   }))\n\n   function handleCategoryChange(e){\n      console.log(e);\n      setSelectedCategory(e)\n   }\n\n   function handleDifficultyChange(e){\n      setSelectedDifficulty(e)\n   }\n\n   return (\n      <div className=\"container\">\n         <div className=\"box\">\n               <h1>Welcome to Trivia Royale!</h1>\n               {error ? <li>{error.message}</li> : <Select className=\"selectBox\" onChange={handleCategoryChange} options={categoryOptions} placeholder={selectedCategory.label}/>}\n               {error ? <li>{error.message}</li> : <Select className=\"selectBox\" onChange={handleDifficultyChange} options={difficultyOptions} placeholder={selectedDifficulty.label}/>}\n               <button onClick={() => handleClick(selectedCategory.value, selectedDifficulty.value)}>Okay!</button>\n         </div>\n      </div>\n   )\n}\n","import React, {useState, useEffect} from 'react'\nimport { Form } from 'semantic-ui-react'\nimport {useParams, useHistory} from 'react-router-dom'\nimport { Html5Entities } from 'html-entities';\n\nexport default function Question(props){\n   const { id } = useParams()\n   const htmlEntities = new Html5Entities();\n   const [answerOptions, setAnswerOptions] = useState([]);\n   const [selectedAnswer, setSelectedAnswer] = useState();\n   const [isLoading, setIsLoading] = useState(false);\n   const questionObj = props.questionList[id - 1];\n   const questionText = htmlEntities.decode(questionObj.question);\n   const history = useHistory();\n   useEffect(() => {\n      setIsLoading(true)\n      let options = questionObj.incorrect_answers\n      options.push(questionObj.correct_answer)\n      options = shuffle(options)\n      setAnswerOptions(options)\n      setIsLoading(false)\n   },[id])\n   //found at (https://bost.ocks.org/mike/shuffle/) great implementation of a random shuffle\n   function shuffle(array) {\n      var currentIndex = array.length, temporaryValue, randomIndex;\n\n      // While there remain elements to shuffle...\n      while (0 !== currentIndex) {\n\n         // Pick a remaining element...\n         randomIndex = Math.floor(Math.random() * currentIndex);\n         currentIndex -= 1;\n         // And swap it with the current element.\n         temporaryValue = array[currentIndex];\n         array[currentIndex] = array[randomIndex];\n         array[randomIndex] = temporaryValue;\n      }\n      return array;\n   }\n   function nextQuestion(){\n      history.push(`/game/questions/${Number(id) + 1}`)\n   }\n\n   function handleClick(e){\n      console.log(e);\n      setSelectedAnswer(e)\n   }\n   function handleSubmit(e){\n      e.preventDefault();\n\n      console.log(props.score);\n      if (selectedAnswer === questionObj.correct_answer){\n         props.setScore(prevScore => prevScore + 1)\n      }\n      else {\n         if (props.health.length === 1){\n            props.setHealth(props.health.slice(1))\n            history.push('/game/over');\n            return\n         }else {\n            props.setHealth(props.health.slice(1))\n         }\n      }\n      if (Number(id) === props.questionList.length){\n         history.push(`/game/over`)\n      }else {\n         setTimeout(nextQuestion, 50)\n      }\n\n   }\n\n   if (isLoading)\n   {\n      return(\n         <div className=\"container\">\n            <div className=\"box\">\n               <h1>Loading...</h1>\n            </div>\n         </div>\n\n      )\n   }\n   else\n   {\n      const hearts = props.health.map(heart => {\n         return (<h1 style={{display: \"inline\"}}>{heart}</h1>)\n      })\n\n      const answerOptionsButtons = answerOptions.map((option, i) => {\n         return (\n            <div className=\"radio\" onClick={() => handleClick(option)}>\n               <input type=\"radio\" key={i} checked={selectedAnswer === option} value={option}  name={`question${i}`}/>\n               <label htmlFor={`question${i}`}>\n                  {htmlEntities.decode(option)}\n               </label>\n            </div>\n         )\n\n         })\n      return (\n         <div className=\"container\">\n            <div className=\"box\">\n               <p>{id}/10</p>\n               {hearts}\n               <h1>{questionText}</h1>\n               <form>\n                  {answerOptionsButtons}\n                  <button onClick={handleSubmit}>Submit</button>\n\n               </form>\n               <br/>\n               <a onClick={props.playAgain}>Play again</a>\n            </div>\n         </div>\n      )\n   }\n}\n","import React, {useState, useEffect} from 'react'\nimport {Route, useHistory} from 'react-router-dom'\nimport axios from 'axios'\nimport CategoryPick from './CategoryPick'\nimport Question from './Question'\n\n\nexport default function Game(){\n   const [score, setScore] = useState(0);\n   const [health, setHealth] = useState(['❤️','❤️','❤️'])\n   const [categoryList, setCategoryList] = useState([]);\n   const [questionList, setQuestionList] = useState();\n   const [selectedCategory, setSelectedCategory] = useState();\n   const [selectedDifficulty, setSelectedDifficulty] = useState();\n   const [isLoading, setIsLoading] = useState(true);\n   const [error, setError] = useState('');\n   const history = useHistory();\n\n   function handleClick(id, difficulty){\n      setSelectedCategory(id);\n      setSelectedDifficulty(difficulty);\n   }\n\n   function playAgain(e){\n      e.preventDefault();\n      setScore(0);\n      setQuestionList([]);\n      setSelectedCategory(undefined);\n      setHealth(['❤️','❤️','❤️'])\n      history.push('/game');\n   }\n\n   function playAgain(){\n      setIsLoading(true)\n      history.push('/game');\n      window.location.reload();\n   }\n\n   function getCategories(){\n      axios.get('https://opentdb.com/api_category.php')\n         .then( res => {\n            setCategoryList(res.data.trivia_categories)\n\n            setIsLoading(false)\n         })\n         .catch(err => {\n            setError(err.message)\n            setIsLoading(false)\n         })\n         console.log('called')\n   }\n   function getQuestions(){\n      axios.get(`https://opentdb.com/api.php?amount=10&category=${selectedCategory}&difficulty=${selectedDifficulty}`)\n         .then( res => {\n            setQuestionList(res.data.results);\n            setIsLoading(false);\n            history.push('/game/questions/1')\n         })\n   }\n\n   useEffect(() => {\n      setIsLoading(true)\n      if (selectedCategory === undefined){\n         setTimeout(getCategories, 1000)\n      }\n      else\n      {\n         setTimeout(getQuestions, 1000)\n      }\n   },[selectedCategory])\n\n   console.log(\"score is \" + score);\n   if (isLoading) {\n      document.body.style.cursor = 'wait';\n      return (\n         <div className=\"container\">\n            <div className=\"box\">\n               <h1>Loading...</h1>\n            </div>\n         </div>\n      )\n\n   } else {\n      document.body.style.cursor = 'default';\n      return (\n         <>\n            <Route exact path='/'>\n               <CategoryPick handleClick={handleClick} categoryList={categoryList} />\n            </Route>\n            <Route path='/game/over'>\n               <div className=\"container\">\n                  <div className=\"box\">\n                     <h1>{health.length < 1 ? \"YOU DIED\" : \"GAME OVER\"}</h1>\n                     <h2>You scored: {score} points!</h2>\n                     <button onClick={playAgain}>Play again</button>\n                  </div>\n               </div>\n            </Route>\n            <Route path='/game/questions/:id' children={<Question playAgain={playAgain} health={health} setHealth={setHealth} questionList={questionList} score={score} setScore={setScore}/>} />\n         </>\n      )\n   }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { BreakpointProvider, setDefaultBreakpoints } from 'react-socks'\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom'\nimport Home from \"./Home\"\nimport Game from './Game'\n\nfunction App() {\n   setDefaultBreakpoints([\n      { xs: 0 },\n      { s: 500},\n      { m: 550 },\n      { l: 800 },\n      { xl: 1025 }\n   ]);\n  return (\n     <Router>\n        <BreakpointProvider>\n            <Switch>\n               <Route exact path='/'>\n                  <Game />\n               </Route>\n               <Route path='/game'>\n                  <Game />\n               </Route>\n            </Switch>\n        </BreakpointProvider>\n     </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}